/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/*                                                                                */
/* Permission is hereby granted, free of charge, to any person obtaining a copy   */
/* of this software and associated documentation files (the "Software"), to deal  */
/* in the Software without restriction, including without limitation the rights   */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      */
/* copies of the Software, and to permit persons to whom the Software is          */
/* furnished to do so, subject to the following conditions:                       */
/*                                                                                */
/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software.                                */
/*                                                                                */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  */
/* SOFTWARE.                                                                      */
/**********************************************************************************/

// Autogenerated file by 'generator.py' on 2023-11-05 14:43:57.718271, do not modify

#pragma once

#include "core/string_id.hpp"
#include "core/string_utf.hpp"
#include "core/string_utils.hpp"
#include "gfx/gfx_defs.hpp"
#include "math/mat.hpp"
#include "math/vec.hpp"

namespace wmoge {

    static const char source_luminance_avg_gl410_comp[] = R"(

#define NUM_HISTOGRAM_BINS (256)
#define MODE_ADAPTIVE (0)
#define MODE_INSTANT (1)

uniform sampler2D Image;



layout (std140) uniform Params {
float HistogramLogMin;
float HistogramLogMax;
float SpeedUp;
float SpeedDown;
float ExposureCompensation;
float Mode;
float DeltaTime;
float TotalPixelsCount;
};

layout (std430) buffer Histogram {
uint Bins[256];
};

layout (std430) buffer Luminance {
float LumTemporal;
float AutoExposure;
};


// https://bruop.github.io/exposure/
// http://www.alextardif.com/HistogramLuminance.html
// https://knarkowicz.wordpress.com/2016/01/09/automatic-exposure/
// https://google.github.io/filament/Filament.md.html#imagingpipeline/physicallybasedcamera
// https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/PostProcessEffects/AutomaticExposure/
// https://google.github.io/filament/Filament.md.html#imagingpipeline/physicallybasedcamera
#define DEFAULT_ISO 100.0f
#define DEFAULT_SENSITIVITY 12.5f
float Ev100FromLuminance(float luminance) {
    return log2(luminance * (DEFAULT_ISO / DEFAULT_SENSITIVITY));
}
float Ev100FromCamSettings(float aperture, float shutterSpeedSec, float sensitivity) {
    return log2((aperture * aperture) / shutterSpeedSec * 100.0f / sensitivity);
}
float Ev100ToExposureFactor(float ev100, float exposureCompenstation) {
    return 1.0f / (pow(2.0f, ev100 + exposureCompenstation) + 1.2f);
}
float Ev100ToLuminance(float ev100) {
    return exp2(ev100 - 3.0f);    
}
float LuminanceTemporalAdaptation(float lumTarget, float lumCurrent, float dt, float adaptationSpeedUp, float adaptationSpeedDown) {
    const bool adaptationUp = lumTarget > lumCurrent;
    const float adaptation = mix(adaptationSpeedDown, adaptationSpeedUp, float(adaptationUp));
    return lumCurrent + (lumTarget - lumCurrent) * (1.0f - exp(-dt * adaptation));
}
#define GROUP_SIZE_DEFAULT 16
layout (local_size_x = GROUP_SIZE_DEFAULT, local_size_y = GROUP_SIZE_DEFAULT, local_size_z = 1) in;
shared uint s_histogramBinsAvg[NUM_HISTOGRAM_BINS];
void main() {
    const uint index = gl_LocalInvocationIndex;
    const uint pixelsInBin = Bins[index];
    Bins[index] = 0; // reset bins value
    s_histogramBinsAvg[index] = pixelsInBin * index;
    groupMemoryBarrier();
    for (int offset = NUM_HISTOGRAM_BINS / 2; offset > 0; offset /= 2) {
        if (index < offset) {
            s_histogramBinsAvg[index] += s_histogramBinsAvg[index + offset]; 
        }
        groupMemoryBarrier();
    }
    if (index == 0) {
        const float lumRange = HistogramLogMax - HistogramLogMin;    
        const float numBlackPixels = pixelsInBin;
        const float finalWeightedCount = s_histogramBinsAvg[0];
        const float weightedLogAverage = (finalWeightedCount / max(TotalPixelsCount - numBlackPixels, 1.0f));
        const float weightedAvgLuminance = exp2((weightedLogAverage - 1.0f) / float(NUM_HISTOGRAM_BINS - 2) * lumRange + HistogramLogMin);
        const int mode = int(Mode);
        float lumCur = LumTemporal;
        switch (mode) {
            case MODE_ADAPTIVE:
                lumCur = LuminanceTemporalAdaptation(weightedAvgLuminance, lumCur, DeltaTime, SpeedUp, SpeedDown);
                break;
            case MODE_INSTANT:
                lumCur = weightedAvgLuminance;
                break;
            default:
                break;        
        }
        lumCur = clamp(lumCur, exp2(HistogramLogMin), exp2(HistogramLogMax));
        
        AutoExposure = Ev100ToExposureFactor(Ev100FromLuminance(lumCur), ExposureCompensation);
        LumTemporal = lumCur;
    }
}

)";
}
