/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/*                                                                                */
/* Permission is hereby granted, free of charge, to any person obtaining a copy   */
/* of this software and associated documentation files (the "Software"), to deal  */
/* in the Software without restriction, including without limitation the rights   */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      */
/* copies of the Software, and to permit persons to whom the Software is          */
/* furnished to do so, subject to the following conditions:                       */
/*                                                                                */
/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software.                                */
/*                                                                                */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  */
/* SOFTWARE.                                                                      */
/**********************************************************************************/

// Autogenerated file by 'generator.py' on 2023-10-14 20:14:06.185035, do not modify

#pragma once

#include "core/string_id.hpp"
#include "core/string_utf.hpp"
#include "core/string_utils.hpp"
#include "gfx/gfx_defs.hpp"
#include "math/mat.hpp"
#include "math/vec.hpp"
#include "render/shader_pass.hpp"

#include "auto_material_deferred_gl410_frag.hpp"
#include "auto_material_deferred_gl410_vert.hpp"
#include "auto_material_deferred_vk450_frag.hpp"
#include "auto_material_deferred_vk450_vert.hpp"

namespace wmoge {
    /** @brief Auto generated pass for 'material_deferred' shader */
    class ShaderPassMaterialDeferred final : public ShaderPass {
    public:
        ShaderPassMaterialDeferred()           = default;
        ~ShaderPassMaterialDeferred() override = default;
        StringId get_name() override { return SID("material_deferred"); }
        void     fill_layout(GfxDescSetLayoutDescs& layouts_desc, Shader* shader) override {
            // fill set num = 0
            {
                auto& layout              = layouts_desc.emplace_back();
                auto& binding_FrameData   = layout.emplace_back();
                binding_FrameData.name    = SID("FrameData");
                binding_FrameData.binding = 0;
                binding_FrameData.count   = 1;
                binding_FrameData.type    = GfxBindingType::UniformBuffer;
                auto& binding_ViewData    = layout.emplace_back();
                binding_ViewData.name     = SID("ViewData");
                binding_ViewData.binding  = 1;
                binding_ViewData.count    = 1;
                binding_ViewData.type     = GfxBindingType::UniformBuffer;
            }
            // fill set num = 1
            if (shader) {
                auto& layout = layouts_desc.emplace_back();
                shader->fill_layout(layout);
            }
            // fill set num = 2
            {
                auto& layout                 = layouts_desc.emplace_back();
                auto& binding_DrawCallData   = layout.emplace_back();
                binding_DrawCallData.name    = SID("DrawCallData");
                binding_DrawCallData.binding = 0;
                binding_DrawCallData.count   = 1;
                binding_DrawCallData.type    = GfxBindingType::UniformBuffer;
            }
        }
        Status reload_sources(const std::string& folder, FileSystem* file_system) override {
            // lang is vk450
            {
                const auto file_path = folder + '/' + "auto_material_deferred_vk450_vert.glsl";
                if (file_system->read_file(file_path, m_vertex[0])) {
                    WG_LOG_INFO("reload shader from file " << file_path);
                }
            }
            // lang is gl410
            {
                const auto file_path = folder + '/' + "auto_material_deferred_gl410_vert.glsl";
                if (file_system->read_file(file_path, m_vertex[1])) {
                    WG_LOG_INFO("reload shader from file " << file_path);
                }
            }
            // lang is vk450
            {
                const auto file_path = folder + '/' + "auto_material_deferred_vk450_frag.glsl";
                if (file_system->read_file(file_path, m_fragment[0])) {
                    WG_LOG_INFO("reload shader from file " << file_path);
                }
            }
            // lang is gl410
            {
                const auto file_path = folder + '/' + "auto_material_deferred_gl410_frag.glsl";
                if (file_system->read_file(file_path, m_fragment[1])) {
                    WG_LOG_INFO("reload shader from file " << file_path);
                }
            }
            return StatusCode::Ok;
        }
        const std::string& get_vertex(GfxShaderLang lang) override { return m_vertex[int(lang)]; }
        std::string        m_vertex[2] = {source_material_deferred_vk450_vert, source_material_deferred_gl410_vert};
        const std::string& get_fragment(GfxShaderLang lang) override { return m_fragment[int(lang)]; }
        std::string        m_fragment[2] = {source_material_deferred_vk450_frag, source_material_deferred_gl410_frag};
        const std::string& get_compute(GfxShaderLang lang) override { return m_compute[int(lang)]; }
        std::string        m_compute[2];
    };
}// namespace wmoge
