/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/*                                                                                */
/* Permission is hereby granted, free of charge, to any person obtaining a copy   */
/* of this software and associated documentation files (the "Software"), to deal  */
/* in the Software without restriction, including without limitation the rights   */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      */
/* copies of the Software, and to permit persons to whom the Software is          */
/* furnished to do so, subject to the following conditions:                       */
/*                                                                                */
/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software.                                */
/*                                                                                */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  */
/* SOFTWARE.                                                                      */
/**********************************************************************************/

// Autogenerated file by 'generator.py' on 2023-10-14 20:14:06.185035, do not modify

#pragma once

#include "core/string_id.hpp"
#include "core/string_utf.hpp"
#include "core/string_utils.hpp"
#include "gfx/gfx_defs.hpp"
#include "math/mat.hpp"
#include "math/vec.hpp"

namespace wmoge {

    static const char source_text_vk450_vert[] = R"(
layout (set = 0, binding = 1) uniform sampler2D FontTexture;

layout (set = 0, binding = 0, std140) uniform Params {
mat4 mat_clip_proj_screen;
float inverse_gamma;
float __pad_1;
float __pad_2;
float __pad_3;
};


#define TARGET_VULKAN
#if defined(TARGET_VULKAN)
#define LAYOUT_LOCATION(idx) layout(location = idx)
#else
#define LAYOUT_LOCATION(idx)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(set = set_idx, binding = binding_idx, fields_layout)
#else
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(fields_layout)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_SAMPLER(set_idx, binding_idx) layout(set = set_idx, binding = binding_idx)
#else
#define LAYOUT_SAMPLER(set_idx, binding_idx)
#endif
vec3 srgb_to_linear(in vec3 color, in float gamma) {
    return pow(color, vec3(gamma));
}
vec3 linear_to_srgb(in vec3 color, in float inverse_gamma) {
    return pow(color, vec3(inverse_gamma));
}
vec2 unpack_uv(in vec2 uv) {
    #ifdef TARGET_VULKAN
    return vec2(uv.x, 1.0f - uv.y);
    #else
    return uv;
    #endif
}
//@ in vec3 inPos3f;
//@ in vec4 inCol04f;
//@ in vec2 inUv02f;
#ifndef ATTRIB_Pos3f
#error "Pos attribute must be defined"
#endif
#ifndef ATTRIB_Col04f
#error "Col attribute must be defined"
#endif
#ifndef ATTRIB_Uv02f
#error "Uv attribute must be defined"
#endif
LAYOUT_LOCATION(0) out vec4 fsCol04f;
LAYOUT_LOCATION(1) out vec2 fsUv02f;
void main() {
    fsCol04f = inCol04f;
    fsUv02f = unpack_uv(inUv02f);
    gl_Position = mat_clip_proj_screen * vec4(inPos3f, 1.0f);
}

)";
}
