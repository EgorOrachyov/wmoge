/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/*                                                                                */
/* Permission is hereby granted, free of charge, to any person obtaining a copy   */
/* of this software and associated documentation files (the "Software"), to deal  */
/* in the Software without restriction, including without limitation the rights   */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      */
/* copies of the Software, and to permit persons to whom the Software is          */
/* furnished to do so, subject to the following conditions:                       */
/*                                                                                */
/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software.                                */
/*                                                                                */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  */
/* SOFTWARE.                                                                      */
/**********************************************************************************/

// Autogenerated file by 'generator.py' on 2023-11-05 14:43:57.718271, do not modify

#pragma once

#include "core/string_id.hpp"
#include "core/string_utf.hpp"
#include "core/string_utils.hpp"
#include "gfx/gfx_defs.hpp"
#include "math/mat.hpp"
#include "math/vec.hpp"

namespace wmoge {

    static const char source_bloom_vk450_comp[] = R"(


layout (set = 0, binding = 1) uniform sampler2D Source;

layout (set = 0, binding = 2) uniform sampler2D SourcePrev;


layout (set = 0, binding = 3, rgba16f) uniform writeonly image2D Result;


layout (set = 0, binding = 0, std140) uniform Params {
vec4 ThresholdKnee;
float UpsampleRadius;
float UpsampleWeight;
float _pr_pad0;
float _pr_pad1;
};


#define TARGET_VULKAN
#if defined(TARGET_VULKAN)
#define LAYOUT_LOCATION(idx) layout(location = idx)
#else
#define LAYOUT_LOCATION(idx)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(set = set_idx, binding = binding_idx, fields_layout)
#else
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(fields_layout)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_SAMPLER(set_idx, binding_idx) layout(set = set_idx, binding = binding_idx)
#else
#define LAYOUT_SAMPLER(set_idx, binding_idx)
#endif
// Flip optionally UV (for GL or VK to work uniformly)
vec2 UnpackUv(in vec2 uv) {
    #ifdef TARGET_VULKAN
    return vec2(uv.x, 1.0f - uv.y);
    #else
    return uv;
    #endif
}
mat4 GetIdentity4x4() {
    mat4 matrix = mat4(
        vec4(1,0,0,0),
        vec4(0,1,0,0),
        vec4(0,0,1,0),
        vec4(0,0,0,1));
        
    return matrix;
}
vec3 TransformLocalToWorld(in vec3 posLocal, in mat4 localToWorld) {
    return (localToWorld * vec4(posLocal, 1.0f)).xyz;
}
vec3 TransformLocalToWorldNormal(in vec3 normLocal, in mat4 normalMatrix) {
    return (normalMatrix * vec4(normLocal, 0.0f)).xyz;
}
vec2 GidToUv(uvec2 gid, ivec2 size) {
    return (vec2(gid) + vec2(0.5f, 0.5f)) / vec2(size);
}
float Saturate(float x) {
    return clamp(x, 0.0f, 1.0f);
}
uint Flatten3D(uvec3 coord, uvec3 dim) {
    return coord.x * dim.y * dim.z + coord.y * dim.z + coord.z;
}
uvec3 Unflatten3D(uint index, uvec3 dim) {
    uvec3 coord;
    coord.x = index / (dim.y * dim.z);
    index -= coord.x * dim.y * dim.z;
    coord.y = index / (dim.z);
    index -= coord.y * dim.z;
    coord.z = index;
    return coord;
}
float DepthToZ(in float depth, in float nearZ, in float farZ) {
    const float pz = depth * 2.0f - 1.0f;
    return (2.0 * nearZ * farZ) / (farZ + nearZ - pz * (farZ - nearZ)); 
}
vec3 ProjectPoint(in vec3 p, in mat4 projection) {
    vec4 projected = projection * vec4(p, 1.0f);
    projected.xyz /= projected.w;
    return projected.xyz;
}
vec3 NdcToView(in vec3 ndc, in mat4 projInv) {
    return ProjectPoint(ndc, projInv);
}
vec3 UvDepthToNdc(in vec2 uv, in float depth) {
    return vec3(uv, depth) * 2.0f - 1.0f;
}
#define EPSILON           0.00001f
#define EPSILON_LUMINANCE 0.001f
#define PI          3.14159265359
#define PI_HALF     1.57079632679
#define PI_QUARTER  0.78539816339
#define EULER_NUM   2.71828182846
#define REFLECTANCE_TABLE_WATER         0.02
#define REFLECTANCE_TABLE_FABRIC        0.04
#define REFLECTANCE_TABLE_LIQUIDS       0.02
#define REFLECTANCE_TABLE_GEMSTONES     0.05
#define REFLECTANCE_TABLE_PLASTIC       0.04
#define REFLECTANCE_TABLE_GLASS         0.04
#define REFLECTANCE_TABLE_DIELECTRIC    0.04
#define REFLECTANCE_TABLE_EYES          0.025
#define REFLECTANCE_TABLE_SKIN          0.028
#define REFLECTANCE_TABLE_HAIR          0.046
#define REFLECTANCE_TABLE_TEETH         0.058
#define REFLECTANCE_TABLE_DEFAULT       0.04
#define IOR_TABLE_WATER         1.33
#define IOR_TABLE_FABRIC        1.5
#define IOR_TABLE_LIQUIDS       1.33
#define IOR_TABLE_GEMSTONES     1.58
#define IOR_TABLE_PLASTIC       1.5
#define IOR_TABLE_GLASS         1.5
#define IOR_TABLE_DIELECTRIC    1.33
#define IOR_TABLE_EYES          1.38
#define IOR_TABLE_SKIN          1.4
#define IOR_TABLE_HAIR          1.55
#define IOR_TABLE_TEETH         1.63
#define IOR_TABLE_DEFAULT       1.5
#define LIGHT_TYPE_DIR      0
#define LIGHT_TYPE_SPOT     1
#define LIGHT_TYPE_POINT    2
#define LIGHT_TYPE_AREA     3
vec3 ColorSrgbToLinear(in vec3 color, in float gamma) {
    return pow(color, vec3(gamma));
}
vec3 ColorLinearToSrgb(in vec3 color, in float inverse_gamma) {
    return pow(color, vec3(inverse_gamma));
}
// Convert rgb to luminance with rgb in linear space 
// with sRGB primaries and D65 white point
float ColorToLuminance(in vec3 color) {
	return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));
}
// Quadratic color thresholding
// curve = (threshold - knee, knee * 2, 0.25 / knee)
vec3 QuadraticThreshold(vec3 color, float threshold, vec3 curve) {
    // Pixel brightness
    float br = max(color.r, max(color.g, color.b));
    // Under-threshold part: quadratic curve
    float rq = clamp(br - curve.x, 0.0, curve.y);
    rq = curve.z * rq * rq;
    // Combine and apply the brightness response curve.
    color *= max(rq, br - threshold) / max(br, EPSILON);
    return color;
}
// Better, temporally stable box filtering
// [Jimenez14] http://goo.gl/eomGso
// . . . . . . .
// . A . B . C .
// . . D . E . .
// . F . G . H .
// . . I . J . .
// . K . L . M .
// . . . . . . .
vec3 DownsampleBox13Tap(in vec2 uv) {
    vec3 result = vec3(0,0,0);
    const vec3 A = textureOffset(Source, uv, ivec2(-2, -2)).rgb;
    const vec3 B = textureOffset(Source, uv, ivec2( 0, -2)).rgb;
    const vec3 C = textureOffset(Source, uv, ivec2( 2, -2)).rgb;
    const vec3 D = textureOffset(Source, uv, ivec2(-1, -1)).rgb;
    const vec3 E = textureOffset(Source, uv, ivec2( 1, -1)).rgb;
    const vec3 F = textureOffset(Source, uv, ivec2(-2,  0)).rgb;
    const vec3 G = textureOffset(Source, uv, ivec2( 0,  0)).rgb;
    const vec3 H = textureOffset(Source, uv, ivec2( 2,  0)).rgb;
    const vec3 I = textureOffset(Source, uv, ivec2(-1,  1)).rgb;
    const vec3 J = textureOffset(Source, uv, ivec2( 1,  1)).rgb;
    const vec3 K = textureOffset(Source, uv, ivec2(-2,  2)).rgb;
    const vec3 L = textureOffset(Source, uv, ivec2( 0,  2)).rgb;
    const vec3 M = textureOffset(Source, uv, ivec2( 2,  2)).rgb;
    const vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);
    result += (D + E + I + J) * div.x;
    result += (A + B + G + F) * div.y;
    result += (B + C + H + G) * div.y;
    result += (F + G + L + K) * div.y;
    result += (G + H + M + L) * div.y;
    
    return result;
}
// Clamp color using user settings for bloom
// Settings: threshold and curve with knee param
vec4 Prefilter(vec3 color) {
    color = QuadraticThreshold(color, ThresholdKnee.x, ThresholdKnee.yzw);
    return vec4(color, 1.0f);
}
vec4 DownsamplePrefilterPass(in vec2 uv) {
    return Prefilter(DownsampleBox13Tap(uv));
}
vec4 DownsamplePass(in vec2 uv) {
    return vec4(DownsampleBox13Tap(uv), 1.0f);
}
// 9-tap bilinear upsampler (tent filter)
vec3 UpsampleTent(in vec2 uv) {
    const vec2 texel = 1.0f / textureSize(Source, 0);
    const vec2 offset = UpsampleRadius * texel;
    vec3 result = vec3(0,0,0);
    result += texture(SourcePrev, uv + offset * vec2(-1,-1)).rgb;
    result += texture(SourcePrev, uv + offset * vec2( 0,-1)).rgb * 2.0;
    result += texture(SourcePrev, uv + offset * vec2( 1,-1)).rgb;
    result += texture(SourcePrev, uv + offset * vec2(-1, 0)).rgb * 2.0;
    result += texture(SourcePrev, uv + offset * vec2( 0, 0)).rgb * 4.0;
    result += texture(SourcePrev, uv + offset * vec2( 1, 0)).rgb * 2.0;
    result += texture(SourcePrev, uv + offset * vec2(-1, 1)).rgb;
    result += texture(SourcePrev, uv + offset * vec2( 0, 1)).rgb * 2.0;
    result += texture(SourcePrev, uv + offset * vec2( 1, 1)).rgb;
    return result * (1.0f / 16.0f);
}
vec4 Combine(vec3 bloom, in vec2 uv) {
    vec3 color = texture(Source, uv).rgb;
    vec3 mixed = mix(color, bloom, UpsampleWeight);
    return vec4(mixed, 1.0f);
}
vec4 UpsamplePass(in vec2 uv) {
    return Combine(UpsampleTent(uv), uv);
}
#define GROUP_SIZE_DEFAULT 8
layout (local_size_x = GROUP_SIZE_DEFAULT, local_size_y = GROUP_SIZE_DEFAULT, local_size_z = 1) in;
void main() {
    const uvec2 gid  = gl_GlobalInvocationID.xy;
    const ivec2 size = imageSize(Result);
    const vec2  uv   = GidToUv(gid, size);
    if (gid.x >= size.x || gid.y >= size.y) {
        return;
    }    
    vec4 outColor;
#ifdef BLOOM_DOWNSAMPLE_PREFILTER 
    outColor = DownsamplePrefilterPass(uv);
#endif
#ifdef BLOOM_DOWNSAMPLE 
    outColor = DownsamplePass(uv);
#endif
#ifdef BLOOM_UPSAMPLE
    outColor = UpsamplePass(uv);
#endif
    imageStore(Result, ivec2(gid), outColor);
}

)";
}
