/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/*                                                                                */
/* Permission is hereby granted, free of charge, to any person obtaining a copy   */
/* of this software and associated documentation files (the "Software"), to deal  */
/* in the Software without restriction, including without limitation the rights   */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      */
/* copies of the Software, and to permit persons to whom the Software is          */
/* furnished to do so, subject to the following conditions:                       */
/*                                                                                */
/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software.                                */
/*                                                                                */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  */
/* SOFTWARE.                                                                      */
/**********************************************************************************/

// Autogenerated file by 'generator.py' on 2023-11-01 12:19:19.187688, do not modify

#pragma once

#include "core/string_id.hpp"
#include "core/string_utf.hpp"
#include "core/string_utils.hpp"
#include "gfx/gfx_defs.hpp"
#include "math/mat.hpp"
#include "math/vec.hpp"

namespace wmoge {

    static const char source_luminance_histogram_gl410_comp[] = R"(

#define NUM_HISTOGRAM_BINS (256)

uniform sampler2D Image;



layout (std140) uniform Params {
float HistogramLogMin;
float HistogramLogMax;
float SpeedUp;
float SpeedDown;
float ExposureCompensation;
float Mode;
float DeltaTime;
float TotalPixelsCount;
};

layout (std430) buffer Histogram {
uint Bins[256];
};

layout (std430) buffer Luminance {
float LumTemporal;
float AutoExposure;
};


// https://bruop.github.io/exposure/
// http://www.alextardif.com/HistogramLuminance.html
// https://knarkowicz.wordpress.com/2016/01/09/automatic-exposure/
// https://google.github.io/filament/Filament.md.html#imagingpipeline/physicallybasedcamera
// https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/PostProcessEffects/AutomaticExposure/
#define TARGET_VULKAN
#define EPSILON 0.00001f
#if defined(TARGET_VULKAN)
#define LAYOUT_LOCATION(idx) layout(location = idx)
#else
#define LAYOUT_LOCATION(idx)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(set = set_idx, binding = binding_idx, fields_layout)
#else
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(fields_layout)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_SAMPLER(set_idx, binding_idx) layout(set = set_idx, binding = binding_idx)
#else
#define LAYOUT_SAMPLER(set_idx, binding_idx)
#endif
// Flip optionally UV (for GL or VK to work uniformly)
vec2 UnpackUv(in vec2 uv) {
    #ifdef TARGET_VULKAN
    return vec2(uv.x, 1.0f - uv.y);
    #else
    return uv;
    #endif
}
mat4 GetIdentity4x4() {
    mat4 matrix = mat4(
        vec4(1,0,0,0),
        vec4(0,1,0,0),
        vec4(0,0,1,0),
        vec4(0,0,0,1));
        
    return matrix;
}
vec3 TransformLocalToWorld(in vec3 posLocal, in mat4 localToWorld) {
    return (localToWorld * vec4(posLocal, 1.0f)).xyz;
}
vec3 TransformLocalToWorldNormal(in vec3 normLocal, in mat4 normalMatrix) {
    return (normalMatrix * vec4(normLocal, 0.0f)).xyz;
}
vec2 GidToUv(uvec2 gid, ivec2 size) {
    return (vec2(gid) + vec2(0.5f, 0.5f)) / vec2(size);
}
vec3 ColorSrgbToLinear(in vec3 color, in float gamma) {
    return pow(color, vec3(gamma));
}
vec3 ColorLinearToSrgb(in vec3 color, in float inverse_gamma) {
    return pow(color, vec3(inverse_gamma));
}
// Convert rgb to luminance with rgb in linear space 
// with sRGB primaries and D65 white point
float ColorToLuminance(in vec3 color) {
	return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));
}
// Quadratic color thresholding
// curve = (threshold - knee, knee * 2, 0.25 / knee)
vec3 QuadraticThreshold(vec3 color, float threshold, vec3 curve)
{
    // Pixel brightness
    float br = max(color.r, max(color.g, color.b));
    // Under-threshold part: quadratic curve
    float rq = clamp(br - curve.x, 0.0, curve.y);
    rq = curve.z * rq * rq;
    // Combine and apply the brightness response curve.
    color *= max(rq, br - threshold) / max(br, EPSILON);
    return color;
}
#define GROUP_SIZE_DEFAULT 16
layout (local_size_x = GROUP_SIZE_DEFAULT, local_size_y = GROUP_SIZE_DEFAULT, local_size_z = 1) in;
uint ColorToHistogramBin(in vec3 color) {
    const float lum = ColorToLuminance(color);
    if (lum <= EPSILON) {
        return 0;
    }
    const float lumRange = HistogramLogMax - HistogramLogMin;    
    const float lumNorm = clamp((log2(lum) - HistogramLogMin) / lumRange, 0.0f, 1.0f);
    return uint(lumNorm * (float(NUM_HISTOGRAM_BINS) - 2.0f) + 1.0f);
} 
shared uint s_histogramBins[NUM_HISTOGRAM_BINS];
void main() {
    const uvec2 tid = gl_LocalInvocationID.xy;
    const uvec2 wid = gl_WorkGroupID.xy;
    const uvec2 gid = gl_GlobalInvocationID.xy;
    const ivec2 size = textureSize(Image, 0);
    const vec2 uv = GidToUv(gid, size);
    const uint index = gl_LocalInvocationIndex;
    s_histogramBins[index] = 0; 
    groupMemoryBarrier();
    if (gid.x < size.x && gid.y < size.y) {
        const vec3 color = textureLod(Image, uv, 0).rgb;
        const uint bin = ColorToHistogramBin(color);
        atomicAdd(s_histogramBins[bin], 1);
    }
    groupMemoryBarrier();
    atomicAdd(Bins[index], s_histogramBins[index]);
}

)";
}
