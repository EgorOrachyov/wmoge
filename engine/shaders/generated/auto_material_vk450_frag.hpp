/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/*                                                                                */
/* Permission is hereby granted, free of charge, to any person obtaining a copy   */
/* of this software and associated documentation files (the "Software"), to deal  */
/* in the Software without restriction, including without limitation the rights   */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      */
/* copies of the Software, and to permit persons to whom the Software is          */
/* furnished to do so, subject to the following conditions:                       */
/*                                                                                */
/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software.                                */
/*                                                                                */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  */
/* SOFTWARE.                                                                      */
/**********************************************************************************/

// Autogenerated file by 'generator.py' on 2023-11-05 14:43:57.718271, do not modify

#pragma once

#include "core/string_id.hpp"
#include "core/string_utf.hpp"
#include "core/string_utils.hpp"
#include "gfx/gfx_defs.hpp"
#include "math/mat.hpp"
#include "math/vec.hpp"

namespace wmoge {

    static const char source_material_vk450_frag[] = R"(
#define MATERIAL_SET 1
struct RenderObjectData{
mat4 LocalToWorld;
mat4 LocalToWorldPrev;
mat4 NormalMatrix;
vec4 AabbPos;
vec4 AabbSizeHalf;
};





layout (set = 0, binding = 0, std140) uniform FrameData {
float time;
float timeDelta;
float _fd_pad0;
float _fd_pad1;
};

layout (set = 0, binding = 1, std140) uniform ViewData {
mat4 Clip;
mat4 Proj;
mat4 View;
mat4 ProjView;
mat4 ClipProjView;
mat4 ProjPrev;
mat4 ViewPrev;
mat4 ProjViewPrev;
mat4 ClipProjViewPrev;
vec4 Movement;
vec4 Position;
vec4 Direction;
vec4 Up;
vec4 PositionPrev;
vec4 DirectionPrev;
vec4 UpPrev;
ivec4 Viewport;
int CamIdx;
int _vd_pad0;
int _vd_pad1;
int _vd_pad2;
};

layout (set = 0, binding = 2, std430) readonly buffer RenderObjectsData {
RenderObjectData RenderObjects[];
};


#define EPSILON           0.00001f
#define EPSILON_LUMINANCE 0.001f
#define PI          3.14159265359
#define PI_HALF     1.57079632679
#define PI_QUARTER  0.78539816339
#define EULER_NUM   2.71828182846
#define REFLECTANCE_TABLE_WATER         0.02
#define REFLECTANCE_TABLE_FABRIC        0.04
#define REFLECTANCE_TABLE_LIQUIDS       0.02
#define REFLECTANCE_TABLE_GEMSTONES     0.05
#define REFLECTANCE_TABLE_PLASTIC       0.04
#define REFLECTANCE_TABLE_GLASS         0.04
#define REFLECTANCE_TABLE_DIELECTRIC    0.04
#define REFLECTANCE_TABLE_EYES          0.025
#define REFLECTANCE_TABLE_SKIN          0.028
#define REFLECTANCE_TABLE_HAIR          0.046
#define REFLECTANCE_TABLE_TEETH         0.058
#define REFLECTANCE_TABLE_DEFAULT       0.04
#define IOR_TABLE_WATER         1.33
#define IOR_TABLE_FABRIC        1.5
#define IOR_TABLE_LIQUIDS       1.33
#define IOR_TABLE_GEMSTONES     1.58
#define IOR_TABLE_PLASTIC       1.5
#define IOR_TABLE_GLASS         1.5
#define IOR_TABLE_DIELECTRIC    1.33
#define IOR_TABLE_EYES          1.38
#define IOR_TABLE_SKIN          1.4
#define IOR_TABLE_HAIR          1.55
#define IOR_TABLE_TEETH         1.63
#define IOR_TABLE_DEFAULT       1.5
#define LIGHT_TYPE_DIR      0
#define LIGHT_TYPE_SPOT     1
#define LIGHT_TYPE_POINT    2
#define LIGHT_TYPE_AREA     3
#define TARGET_VULKAN
#if defined(TARGET_VULKAN)
#define LAYOUT_LOCATION(idx) layout(location = idx)
#else
#define LAYOUT_LOCATION(idx)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(set = set_idx, binding = binding_idx, fields_layout)
#else
#define LAYOUT_BUFFER(set_idx, binding_idx, fields_layout) layout(fields_layout)
#endif
#if defined(TARGET_VULKAN)
#define LAYOUT_SAMPLER(set_idx, binding_idx) layout(set = set_idx, binding = binding_idx)
#else
#define LAYOUT_SAMPLER(set_idx, binding_idx)
#endif
// Flip optionally UV (for GL or VK to work uniformly)
vec2 UnpackUv(in vec2 uv) {
    #ifdef TARGET_VULKAN
    return vec2(uv.x, 1.0f - uv.y);
    #else
    return uv;
    #endif
}
mat4 GetIdentity4x4() {
    mat4 matrix = mat4(
        vec4(1,0,0,0),
        vec4(0,1,0,0),
        vec4(0,0,1,0),
        vec4(0,0,0,1));
        
    return matrix;
}
vec3 TransformLocalToWorld(in vec3 posLocal, in mat4 localToWorld) {
    return (localToWorld * vec4(posLocal, 1.0f)).xyz;
}
vec3 TransformLocalToWorldNormal(in vec3 normLocal, in mat4 normalMatrix) {
    return (normalMatrix * vec4(normLocal, 0.0f)).xyz;
}
vec2 GidToUv(uvec2 gid, ivec2 size) {
    return (vec2(gid) + vec2(0.5f, 0.5f)) / vec2(size);
}
float Saturate(float x) {
    return clamp(x, 0.0f, 1.0f);
}
uint Flatten3D(uvec3 coord, uvec3 dim) {
    return coord.x * dim.y * dim.z + coord.y * dim.z + coord.z;
}
uvec3 Unflatten3D(uint index, uvec3 dim) {
    uvec3 coord;
    coord.x = index / (dim.y * dim.z);
    index -= coord.x * dim.y * dim.z;
    coord.y = index / (dim.z);
    index -= coord.y * dim.z;
    coord.z = index;
    return coord;
}
float DepthToZ(in float depth, in float nearZ, in float farZ) {
    const float pz = depth * 2.0f - 1.0f;
    return (2.0 * nearZ * farZ) / (farZ + nearZ - pz * (farZ - nearZ)); 
}
vec3 ProjectPoint(in vec3 p, in mat4 projection) {
    vec4 projected = projection * vec4(p, 1.0f);
    projected.xyz /= projected.w;
    return projected.xyz;
}
vec3 NdcToView(in vec3 ndc, in mat4 projInv) {
    return ProjectPoint(ndc, projInv);
}
vec3 UvDepthToNdc(in vec2 uv, in float depth) {
    return vec3(uv, depth) * 2.0f - 1.0f;
}
struct Surface {
    vec3 worldPos;
    vec3 worldNorm;
    vec3 baseColor;
    vec3 emissiveColor;
    float metallic;
    float roughness;
    float reflectance;
    float ao;
};
Surface GetDefaultSurface() {
    Surface s;
    s.worldPos = vec3(0,0,0);
    s.worldNorm = vec3(0,1,0);
    s.baseColor = vec3(1,1,1);
    s.emissiveColor = vec3(0,0,0);
    s.metallic = 0;
    s.roughness = 0;
    s.reflectance = 0;
    s.ao = 0;
    return s;
}
struct GBufferValue {
    vec4 value[3];
};
GBufferValue GetDefaultGBufferValue() {
    GBufferValue v;
    v.value[0] = vec4(0,0,0,0);
    v.value[1] = vec4(0,0,0,0);
    v.value[2] = vec4(0,0,0,0);
    return v;
}
GBufferValue PackGBufferFromSurface(in Surface surface) {
    // Encoded attributes
    // - vec3  baseColor;
    // - vec3  emissiveColor;
    // - float metallic;
    // - float roughness;
    // - float reflectance;
    // - float ao;
    GBufferValue v;
    v.value[0] = vec4(surface.baseColor, 0.0f);
    v.value[1] = vec4(surface.emissiveColor, 0.0f);
    v.value[2] = vec4(surface.metallic, surface.roughness, surface.reflectance, surface.ao);
    return v;
}
Surface UnpackSurfaceFromGBuffer(in GBufferValue gbuffer) {
    // Decoded attributes
    // - vec3  baseColor;
    // - vec3  emissiveColor;
    // - float metallic;
    // - float roughness;
    // - float reflectance;
    // - float ao;
    Surface surface;
    surface.baseColor       = gbuffer.value[0].rgb;
    surface.emissiveColor   = gbuffer.value[1].rgb;
    surface.metallic        = gbuffer.value[2].r;
    surface.roughness       = gbuffer.value[2].g;
    surface.reflectance     = gbuffer.value[2].b;
    surface.ao              = gbuffer.value[2].a;
    return surface;
}
#ifdef VERTEX_SHADER
    #define INOUT out
#endif
#ifdef FRAGMENT_SHADER
    #define INOUT in
#endif
#ifndef INOUT
    #error "Must be defined"
#endif
#if !defined(INOUT_DISABLE_POS) && (defined(ATTRIB_Pos3f) || defined(ATTRIB_Pos2f))
    LAYOUT_LOCATION( 0) INOUT vec3 inout_worldPos;
#endif
#if !defined(INOUT_DISABLE_NORM) && defined(ATTRIB_Norm3f)
    LAYOUT_LOCATION( 1) INOUT vec3 inout_worldNorm;
#endif
#ifdef ATTRIB_Tang3f
    LAYOUT_LOCATION( 2) INOUT vec3 inout_worldTang;
#endif
#ifdef ATTRIB_Col04f
    LAYOUT_LOCATION( 3) INOUT vec4 inout_col0;
#endif
#ifdef ATTRIB_Col14f
    LAYOUT_LOCATION( 4) INOUT vec4 inout_col1;
#endif
#ifdef ATTRIB_Col24f
    LAYOUT_LOCATION( 5) INOUT vec4 inout_col2;
#endif
#ifdef ATTRIB_Col34f
    LAYOUT_LOCATION( 6) INOUT vec4 inout_col3;
#endif
#ifdef ATTRIB_Uv02f
    LAYOUT_LOCATION( 7) INOUT vec2 inout_uv0;
#endif 
#ifdef ATTRIB_Uv12f
    LAYOUT_LOCATION( 8) INOUT vec2 inout_uv1;
#endif 
#ifdef ATTRIB_Uv22f
    LAYOUT_LOCATION( 9) INOUT vec2 inout_uv2;
#endif 
#ifdef ATTRIB_Uv32f
    LAYOUT_LOCATION(10) INOUT vec2 inout_uv3;
#endif
#ifdef ATTRIB_PrimitiveIdi
    LAYOUT_LOCATION(11) flat INOUT int inout_primitiveId;
#endif
struct InoutAttributes {
    vec3 worldPos;
    vec3 worldNorm;
    vec3 worldTang;
    vec4 col[4];
    vec2 uv[4];
    int primitiveId;
};
#ifdef VERTEX_SHADER
void StoreInoutAttributes(in InoutAttributes attributes) {
    #if defined(ATTRIB_Pos3f) || defined(ATTRIB_Pos2f) 
        inout_worldPos = attributes.worldPos;
    #endif
    #ifdef ATTRIB_Norm3f
        inout_worldNorm = attributes.worldNorm;
    #endif
    #ifdef ATTRIB_Tang3f
        inout_worldTang = attributes.worldTang;
    #endif
    #ifdef ATTRIB_Col04f
        inout_col0 = attributes.col[0];
    #endif
    #ifdef ATTRIB_Col14f
        inout_col1 = attributes.col[1];
    #endif
    #ifdef ATTRIB_Col24f
        inout_col2 = attributes.col[2];
    #endif
    #ifdef ATTRIB_Col34f
        inout_col3 = attributes.col[3];
    #endif
    #ifdef ATTRIB_Uv02f
        inout_uv0 = attributes.uv[0];
    #endif 
    #ifdef ATTRIB_Uv12f
        inout_uv1 = attributes.uv[1];
    #endif 
    #ifdef ATTRIB_Uv22f
        inout_uv2 = attributes.uv[2];
    #endif 
    #ifdef ATTRIB_Uv32f
        inout_uv3 = attributes.uv[3];
    #endif
    #ifdef ATTRIB_PrimitiveIdi
        inout_primitiveId = attributes.primitiveId;
    #endif
}
#endif//VERTEX_SHADER
#ifdef FRAGMENT_SHADER
InoutAttributes ReadInoutAttributes() {
    InoutAttributes attributes;
    attributes.worldPos = vec3(0,0,0);
    attributes.worldNorm = vec3(0,0,0);
    attributes.worldTang = vec3(0,0,0);
    attributes.col[0] = vec4(0,0,0,0);
    attributes.col[1] = vec4(0,0,0,0);
    attributes.col[2] = vec4(0,0,0,0);
    attributes.col[3] = vec4(0,0,0,0);
    attributes.uv[0] = vec2(0,0);
    attributes.uv[1] = vec2(0,0);
    attributes.uv[2] = vec2(0,0);
    attributes.uv[3] = vec2(0,0);
    attributes.primitiveId = -1;
    #if defined(ATTRIB_Pos3f) || defined(ATTRIB_Pos2f) 
        attributes.worldPos = inout_worldPos;
    #endif
    #ifdef ATTRIB_Norm3f
        attributes.worldNorm = inout_worldNorm;
    #endif
    #ifdef ATTRIB_Tang3f
        attributes.worldTang = inout_worldTang;
    #endif
    #ifdef ATTRIB_Col04f
        attributes.col[0] = inout_col0;
    #endif
    #ifdef ATTRIB_Col14f
        attributes.col[1] = inout_col1;
    #endif
    #ifdef ATTRIB_Col24f
        attributes.col[2] = inout_col2;
    #endif
    #ifdef ATTRIB_Col34f
        attributes.col[3] = inout_col3;
    #endif
    #ifdef ATTRIB_Uv02f
        attributes.uv[0] = inout_uv0;
    #endif 
    #ifdef ATTRIB_Uv12f
        attributes.uv[1] = inout_uv1;
    #endif 
    #ifdef ATTRIB_Uv22f
        attributes.uv[2] = inout_uv2;
    #endif 
    #ifdef ATTRIB_Uv32f
        attributes.uv[3] = inout_uv3;
    #endif
    #ifdef ATTRIB_PrimitiveIdi
        attributes.primitiveId = inout_primitiveId;
    #endif
    return attributes;
}
#endif//FRAGMENT_SHADER
RenderObjectData GetRenderObjectDataDefault() {
    RenderObjectData data;
    data.LocalToWorld = GetIdentity4x4();
    data.LocalToWorldPrev = GetIdentity4x4();
    data.NormalMatrix = GetIdentity4x4();
    data.AabbPos = vec4(0,0,0,0);
    data.AabbSizeHalf = vec4(0,0,0,0);
    return data;
}
RenderObjectData GetRenderObjectDataById(in int primitiveId) {
    return RenderObjects[primitiveId];
}
vec3 TransformLocalToWorld(in vec3 posLocal, in int primitiveId) {
    return TransformLocalToWorld(posLocal, GetRenderObjectDataById(primitiveId).LocalToWorld);
}
vec3 TransformLocalToWorldNormal(in vec3 normLocal, in int primitiveId) {
    return TransformLocalToWorldNormal(normLocal, GetRenderObjectDataById(primitiveId).NormalMatrix);
}
vec3 ColorSrgbToLinear(in vec3 color, in float gamma) {
    return pow(color, vec3(gamma));
}
vec3 ColorLinearToSrgb(in vec3 color, in float inverse_gamma) {
    return pow(color, vec3(inverse_gamma));
}
// Convert rgb to luminance with rgb in linear space 
// with sRGB primaries and D65 white point
float ColorToLuminance(in vec3 color) {
	return dot(color, vec3(0.2126729, 0.7151522, 0.0721750));
}
// Quadratic color thresholding
// curve = (threshold - knee, knee * 2, 0.25 / knee)
vec3 QuadraticThreshold(vec3 color, float threshold, vec3 curve) {
    // Pixel brightness
    float br = max(color.r, max(color.g, color.b));
    // Under-threshold part: quadratic curve
    float rq = clamp(br - curve.x, 0.0, curve.y);
    rq = curve.z * rq * rq;
    // Combine and apply the brightness response curve.
    color *= max(rq, br - threshold) / max(br, EPSILON);
    return color;
}
struct ShaderInoutFs {
    InoutAttributes attributes;
    Surface result;
};
void InitShaderInoutFs(inout ShaderInoutFs fs) {
    fs.attributes = ReadInoutAttributes();
    fs.result = GetDefaultSurface();
}
__SHADER_CODE_FRAGMENT__
#ifdef MESH_PASS_FORWARD
    layout (location = 0) out vec4 out_HdrColor;
    layout (location = 1) out vec4 out_Norm;
    layout (location = 2) out int  out_primitiveId;
#endif
#ifdef MESH_PASS_GBUFFER
    layout (location = 0) out vec4 out_GBuffer0;
    layout (location = 1) out vec4 out_GBuffer1;
    layout (location = 2) out vec4 out_GBuffer2;
    layout (location = 3) out int  out_primitiveId;
#endif
#if !defined(MESH_PASS_GBUFFER) && !defined(MESH_PASS_FORWARD)
    #error "Must be specified at least one pass"
#endif
void main() {
    ShaderInoutFs shaderInoutFs;
    InitShaderInoutFs(shaderInoutFs);
    Fragment(shaderInoutFs);
    #ifdef MESH_PASS_FORWARD
        // todo
    #endif
    #ifdef MESH_PASS_GBUFFER
        const Surface result = shaderInoutFs.result;
        const GBufferValue gbuffer = PackGBufferFromSurface(result);
        out_GBuffer0 = gbuffer.value[0];
        out_GBuffer1 = gbuffer.value[1];
        out_GBuffer2 = gbuffer.value[2];
        out_primitiveId = shaderInoutFs.attributes.primitiveId;
    #endif
}

)";
}
