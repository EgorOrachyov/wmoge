/**********************************************************************************/
/* Wmoge game engine                                                              */
/* Available at github https://github.com/EgorOrachyov/wmoge                      */
/**********************************************************************************/
/* MIT License                                                                    */
/*                                                                                */
/* Copyright (c) 2023 Egor Orachyov                                               */
/**********************************************************************************/

#include "common_funcs.glsl"
#include "color.glsl"
#include "hdr.glsl"

#define GROUP_SIZE_DEFAULT 16

layout (local_size_x = GROUP_SIZE_DEFAULT, local_size_y = GROUP_SIZE_DEFAULT, local_size_z = 1) in;

void main() {
    const uvec2 gid = gl_GlobalInvocationID.xy;

    if (gid.x >= TargetSize.x || gid.y >= TargetSize.y) {
        return;
    }    

    const vec2 uv = vec2(gid) / vec2(TargetSize);
    
    const vec3 hdrSrcColor  = textureLod(Image, uv, 0).rgb;
    const vec3 hdrBloom     = textureLod(Bloom, uv, 0).rgb * BloomIntensity;
    const vec3 hdrBloomDirt = textureLod(BloomDirtMask, uv, 0).rgb * BloomDirtMaskIntensity;

    const vec3 hdrColor = hdrSrcColor + hdrBloom + hdrBloom * hdrBloomDirt;

    vec3 ldrColor = hdrColor;
    const int tonemapMode = int(Mode);

    switch (tonemapMode) {
        case TONEMAP_MODE_EXP: 
            ldrColor = TonemapExp(hdrColor, Exposure);
            break;
        case TONEMAP_MODE_REINH: 
            ldrColor = TonemapReinhard(hdrColor);
            break;
        case TONEMAP_MODE_REINH_EXT: 
            ldrColor = TonemapReinhardExtended(hdrColor, WhitePoint);
            break;
        case TONEMAP_MODE_ACES: 
            ldrColor = TonemapACES(hdrColor);
            break;
        case TONEMAP_MODE_UN2: 
            ldrColor = TonemapUncharted2(hdrColor);
            break;     
        default:
            break;
    }

    const vec3 gammaColor = ColorLinearToSrgb(ldrColor, InverseGamma);

    imageStore(Result, ivec2(gid), vec4(gammaColor, 1.0f));
}