import argparse
import datetime
import pathlib
import os

ROOT = pathlib.Path(__file__).parent.parent
DATE = datetime.datetime.now()


def convert_file(file_prefix, file_in, file_out):
    with open(file_out, "w") as destination:
        with open(file_in, "r") as source:
            content = source.readlines()
            destination.write(
                "////////////////////////////////////////////////////////////////////\n"
            )
            destination.write(
                f"// Copyright (c) 2022 - {DATE.date().year} Egor Orachyov\n"
            )
            destination.write(f"// Autogenerated file on {DATE}, do not modify\n")
            destination.write(
                "////////////////////////////////////////////////////////////////////\n\n"
            )
            destination.write("#pragma once\n\n")
            destination.write("namespace wmoge {\n")
            destination.write(f'static const char source_{file_prefix}[] = R"(\n')
            destination.writelines(content)
            destination.write('\n)";\n')
            destination.write("}")
        print(f"process shader {file_prefix}")


def process_files(dir_in, dir_out):
    print(f"process directory {dir_in}")
    print(f"save to directory {dir_out}")
    for entry in os.listdir(dir_in):
        if os.path.isfile(dir_in / entry):
            file_prefix = entry.replace(".glsl", "")
            file_in = dir_in / entry
            file_out = dir_out / f"auto_{file_prefix}.hpp"
            convert_file(file_prefix, file_in, file_out)


def main():
    parser = argparse.ArgumentParser(
        "Convert `shaders` sources into acceptable hpp include files"
    )
    parser.add_argument("--src", help="directory to process", default="./")
    parser.add_argument("--dst", help="directory to save generated files", default="./")
    args = parser.parse_args()
    src_dir = ROOT / args.src
    dst_dir = ROOT / args.dst
    os.makedirs(dst_dir, exist_ok=True)
    process_files(src_dir, dst_dir)


if __name__ == "__main__":
    main()
